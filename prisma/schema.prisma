// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  username      String    @unique
  password      String
  email         String    @unique
  phone         String    @unique
  wallet        Int       @unique
  dateOfBirth   DateTime
  profile       String?
  balance       Int       @default(0)
  createdAt     DateTime  @default(now())
  address       String?
  active        Boolean   @default(true)
  isBlocked     Boolean   @default(false)
  isVerified    Boolean   @default(false)
  otp           String?
  otpExpiration DateTime?
  role          Role      @default(USER)
  products      Product[] @relation("SellerProducts")
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  seller        Seller?

  @@index([id, username, createdAt, email])
}

// Enum for user roles
enum Role {
  USER
  SELLER
  ADMIN
}

model Seller {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String       @unique
  businessName    String // Store/Business name
  description     String? // Business description
  status          SellerStatus @default(PENDING)
  sellerType      SellerType   @default(MARKETPLACE)
  businessAddress String // Physical business address
  taxId           String? // Tax identification number
  bankAccount     String? // Bank account information
  businessPhone   String // Business contact number
  businessEmail   String // Business email
  logo            String? // Business logo URL
  documents       String[] // Array of verification document URLs
  rating          Float        @default(0)
  totalSales      Int          @default(0)
  isVerified      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([id, userId, businessName, status, createdAt])
}

enum SellerType {
  FOODSECTOR
  MARKETPLACE
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  isApproved  Boolean    @default(false)
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  seller      User       @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId    String
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]

  @@index([id, name, description, createdAt, sellerId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([id, name, description, createdAt])
}

model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  cartItems       Cart[]      @relation("CartOrder") // Reference cart items for this order
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([id, userId, status, createdAt])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, rating, productId, createdAt])
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  products  CartItem[]
  order     Order?     @relation("CartOrder", fields: [orderId], references: [id])
  orderId   String? // Nullable because not all carts are linked to an order
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([id, userId, orderId, createdAt])
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}
